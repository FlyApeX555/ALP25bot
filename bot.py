import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from config import BOT_TOKEN, MASTER_CLASSES
from database import Database
from keyboards import get_main_keyboard, get_registration_keyboard, create_master_classes_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserStates(StatesGroup):
    waiting_phone = State()
    waiting_vote = State()

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if await db.is_user_registered(user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            "üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    else:
        # –ù—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã!\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_registration_keyboard()
        )
        await state.set_state(UserStates.waiting_phone)

@dp.message(UserStates.waiting_phone, F.contact)
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    contact = message.contact
    user = message.from_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.register_user(
        telegram_id=user.id,
        username=user.username,
        full_name=f"{user.first_name} {user.last_name or ''}",
        phone=contact.phone_number
    )
    
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!",
        reply_markup=get_main_keyboard()
    )
    
    await show_master_classes(message, state)

@dp.message(F.text == "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def request_phone(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_registration_keyboard()
    )
    await state.set_state(UserStates.waiting_phone)

@dp.message(F.text == "üéØ –í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å")
async def show_master_classes(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if not await db.is_user_registered(user_id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!", reply_markup=get_registration_keyboard())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await db.has_user_voted(user_id):
        vote_info = await db.get_user_vote(user_id)
        if vote_info:
            mc_name, voted_at = vote_info
            await message.answer(
                f"‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å!\n\n"
                f"üéØ –í–∞—à –≤—ã–±–æ—Ä: {mc_name}\n"
                f"üìÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {voted_at}\n\n"
                f"–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–∏–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å.",
                reply_markup=get_main_keyboard()
            )
        return
    
    keyboard = await create_master_classes_keyboard()
    
    await message.answer(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:</b>\n\n"
        "‚úÖ - –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞\n"
        "‚ùå - –º–µ—Å—Ç –Ω–µ—Ç\n\n"
        "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_vote)

@dp.callback_query(F.data.startswith("vote_"))
async def process_vote(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞"""
    master_class_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
    master_classes = await db.get_master_classes()
    mc_info = next((mc for mc in master_classes if mc[0] == master_class_id), None)
    
    if not mc_info:
        await callback.answer("–û—à–∏–±–∫–∞: –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    mc_id, mc_name, max_slots, used_slots = mc_info
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await db.try_reserve_slot(master_class_id, user_id)
    
    if success:
        # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å
        await callback.message.edit_text(
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å—å—é!</b>\n\n"
            f"üèÜ <b>–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:</b> {mc_name}\n"
            f"üìÖ <b>–ú–µ—Å—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> ‚úÖ\n"
            f"üë• <b>–ó–∞–ø–∏—Å–∞–Ω–æ:</b> {used_slots + 1}/{max_slots} —á–µ–ª–æ–≤–µ–∫\n\n"
            f"–ñ–¥–µ–º –≤–∞—Å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ!",
            parse_mode="HTML"
        )
        await callback.answer()
    else:
        # –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å.",
            show_alert=True
        )
    
    await state.clear()

@dp.callback_query(F.data == "refresh")
async def refresh_list(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤"""
    keyboard = await create_master_classes_keyboard()
    
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    except:
        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")

@dp.callback_query(F.data == "full")
async def handle_full(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å"""
    await callback.answer("‚ùå –ù–∞ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —É–∂–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç", show_alert=True)

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π"""
    stats = await db.get_statistics()
    total_users = await db.get_total_users()
    
    if not stats:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã:</b>\n\n"
    
    for name, used_slots, max_slots, is_full in stats:
        percentage = (used_slots / max_slots) * 100
        bar = "‚ñà" * int(percentage / 10) + "‚ñë" * (10 - int(percentage / 10))
        
        text += f"<b>{name}</b>\n"
        text += f"{bar} {used_slots}/{max_slots} ({percentage:.1f}%)\n\n"
    
    text += f"üë• <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}"
    
    await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "‚ÑπÔ∏è –ú–æ—è –∑–∞–ø–∏—Å—å")
async def show_my_vote(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    if not await db.is_user_registered(user_id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!", reply_markup=get_registration_keyboard())
        return
    
    vote_info = await db.get_user_vote(user_id)
    
    if vote_info:
        mc_name, voted_at = vote_info
        await message.answer(
            f"üìã <b>–í–∞—à–∞ –∑–∞–ø–∏—Å—å:</b>\n\n"
            f"üéØ <b>–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:</b> {mc_name}\n"
            f"üìÖ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {voted_at}\n\n"
            f"–ñ–¥–µ–º –≤–∞—Å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏! üéâ",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üéØ –í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å¬ª —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å."
        )

@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "üéØ <b>–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å</b> - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π\n"
        "‚ÑπÔ∏è <b>–ú–æ—è –∑–∞–ø–∏—Å—å</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏\n\n"
        "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        "‚Ä¢ –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –û–î–ò–ù –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å\n"
        "‚Ä¢ –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º."
    )
    await message.answer(help_text, parse_mode="HTML")

@dp.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    logger.info("Database initialized")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
