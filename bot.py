import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config import BOT_TOKEN, ADMIN_IDS
from database import Database
from keyboards import get_main_keyboard, get_registration_keyboard, create_activities_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN or BOT_TOKEN == "—Ç—É—Ç_—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather":
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserStates(StatesGroup):
    waiting_phone = State()
    waiting_vote = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    if await db.is_user_registered(user_id):
        await message.answer("üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        await state.clear()
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–∏—Å–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_registration_keyboard()
        )
        await state.set_state(UserStates.waiting_phone)

@dp.message(Command("myid"))
async def cmd_myid(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    await message.answer(f"–¢–≤–æ–π ID: `{user_id}`\n\n–î–æ–±–∞–≤—å —ç—Ç–æ—Ç ID –≤ ADMIN_IDS –≤ config.py", parse_mode="Markdown")

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [KeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–∫–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º"), KeyboardButton(text="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"), KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    
    admin_keyboard = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    total_users = await db.get_total_users()
    stats = await db.get_statistics()
    
    text = "üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
    text += f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n\n"
    
    for name, used_slots, max_slots, is_full in stats:
        text += f"‚Ä¢ {name}: {used_slots}/{max_slots}\n"
    
    await message.answer(text, reply_markup=admin_keyboard, parse_mode="HTML")

@dp.message(Command("update_activities"))
async def cmd_update_activities(message: Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        await db.update_activities()
        await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

@dp.message(F.text == "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_all_users(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(message.from_user.id):
        return
    
    users = await db.get_all_users()
    
    if not users:
        await message.answer("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    text = "üë• <b>–í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    
    for i, (user_id, username, full_name, phone, registered_at) in enumerate(users, 1):
        username_display = f"@{username}" if username else "–Ω–µ—Ç username"
        phone_display = phone if phone else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        text += f"<b>{i}.</b> {full_name}\n"
        text += f"   ID: {user_id}\n"
        text += f"   Username: {username_display}\n"
        text += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {phone_display}\n"
        text += f"   –î–∞—Ç–∞: {registered_at}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(text) > 3000:
            await message.answer(text, parse_mode="HTML")
            text = ""
    
    if text:
        await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "üìã –°–ø–∏—Å–∫–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º")
async def show_activity_lists(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º"""
    if not is_admin(message.from_user.id):
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏
    keyboard = await create_activities_keyboard()
    
    await message.answer(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(F.data.startswith("vote_"))
async def process_vote(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    activity_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –æ–Ω —Å–º–æ—Ç—Ä–∏—Ç —Å–ø–∏—Å–∫–∏
    if is_admin(user_id) and callback.message.text and "—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" in callback.message.text:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activities = await db.get_activities()
        activity_info = next((a for a in activities if a[0] == activity_id), None)
        
        if not activity_info:
            await callback.answer("–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        act_id, act_name, max_slots, used_slots = activity_info
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await db.get_activity_participants(activity_id)
        
        text = f"üìã <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {act_name}\n"
        text += f"üë• <b>–ó–∞–ø–∏—Å–∞–Ω–æ:</b> {len(participants)}/{max_slots}\n\n"
        
        if not participants:
            text += "üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        else:
            for i, (user_id, username, full_name, phone, voted_at) in enumerate(participants, 1):
                username_display = f"@{username}" if username else "–Ω–µ—Ç username"
                text += f"<b>{i}.</b> {full_name}\n"
                text += f"   ID: {user_id} | {username_display}\n"
                if phone:
                    text += f"   üìû {phone}\n"
                text += f"   üïê {voted_at}\n\n"
        
        await callback.message.answer(text, parse_mode="HTML")
        await callback.answer()
        return
    
    # –û–±—ã—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    success = await db.try_reserve_slot(activity_id, user_id)
    
    if success:
        activities = await db.get_activities()
        activity_info = next((a for a in activities if a[0] == activity_id), None)
        
        if activity_info:
            act_id, act_name, max_slots, used_slots = activity_info
            await callback.message.edit_text(
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å—å—é!</b>\n\n"
                f"üèÜ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {act_name}\n"
                f"üìÖ <b>–ú–µ—Å—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> ‚úÖ\n"
                f"üë• <b>–ó–∞–ø–∏—Å–∞–Ω–æ:</b> {used_slots + 1}/{max_slots} —á–µ–ª–æ–≤–µ–∫\n\n"
                f"–ñ–¥–µ–º –≤–∞—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!",
                parse_mode="HTML"
            )
        await callback.answer()
    else:
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
            show_alert=True
        )
    
    await state.clear()

@dp.message(F.text == "üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_full_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(message.from_user.id):
        return
    
    stats = await db.get_statistics()
    total_users = await db.get_total_users()
    votes_details = await db.get_votes_details()
    
    text = "üìä <b>–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    text += f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
    text += f"üéØ <b>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {len(votes_details)}\n\n"
    
    for name, used_slots, max_slots, is_full in stats:
        percentage = (used_slots / max_slots) * 100 if max_slots > 0 else 0
        bar = "‚ñà" * int(percentage / 10) + "‚ñë" * (10 - int(percentage / 10))
        
        text += f"<b>{name}</b>\n"
        text += f"{bar} {used_slots}/{max_slots} ({percentage:.1f}%)\n\n"
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    text += "<b>–í—Å–µ –∑–∞–ø–∏—Å–∏:</b>\n"
    for i, (user_id, username, full_name, phone, activity_name, voted_at) in enumerate(votes_details, 1):
        username_display = f"@{username}" if username else "–Ω–µ—Ç username"
        text += f"{i}. {full_name} ‚Üí {activity_name}\n"
    
    await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
async def export_to_csv(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
    if not is_admin(message.from_user.id):
        return
    
    import csv
    import io
    from datetime import datetime
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    votes_details = await db.get_votes_details()
    
    if not votes_details:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
    output = io.StringIO()
    writer = csv.writer(output)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow(['ID', 'Username', '–§–ò–û', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏'])
    
    # –î–∞–Ω–Ω—ã–µ
    for user_id, username, full_name, phone, activity_name, voted_at in votes_details:
        writer.writerow([user_id, username or '', full_name, phone or '', activity_name, voted_at])
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    csv_data = output.getvalue()
    output.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file_name = f"activities_export_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.csv"
    
    await message.answer_document(
        types.BufferedInputFile(
            csv_data.encode('utf-8'),
            filename=file_name
        ),
        caption="üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω"
    )

@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def refresh_admin_data(message: Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        return
    
    await cmd_admin(message)
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

@dp.message(F.text == "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_from_admin(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message(UserStates.waiting_phone, F.contact)
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    contact = message.contact
    user = message.from_user
    
    await db.register_user(
        telegram_id=user.id,
        username=user.username,
        full_name=f"{user.first_name} {user.last_name or ''}",
        phone=contact.phone_number
    )
    
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!",
        reply_markup=get_main_keyboard()
    )
    await show_activities(message, state)

@dp.message(F.text == "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def request_phone(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_registration_keyboard()
    )
    await state.set_state(UserStates.waiting_phone)

@dp.message(F.text == "üéØ –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def show_activities(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if not await db.is_user_registered(user_id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!", reply_markup=get_registration_keyboard())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await db.has_user_voted(user_id):
        vote_info = await db.get_user_vote(user_id)
        if vote_info:
            activity_name, voted_at = vote_info
            await message.answer(
                f"‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\n"
                f"üéØ –í–∞—à –≤—ã–±–æ—Ä: {activity_name}\n"
                f"üìÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {voted_at}\n\n"
                f"–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
                reply_markup=get_main_keyboard()
            )
        return
    
    keyboard = await create_activities_keyboard()
    
    await message.answer(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n\n"
        "‚úÖ - –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞\n"
        "‚ùå - –º–µ—Å—Ç –Ω–µ—Ç\n\n"
        "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_vote)

@dp.callback_query(F.data == "refresh")
async def refresh_list(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    keyboard = await create_activities_keyboard()
    
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    except:
        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")

@dp.callback_query(F.data == "full")
async def handle_full(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    await callback.answer("‚ùå –ù–∞ —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∂–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç", show_alert=True)

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π"""
    stats = await db.get_statistics()
    total_users = await db.get_total_users()
    
    if not stats:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n\n"
    
    for name, used_slots, max_slots, is_full in stats:
        percentage = (used_slots / max_slots) * 100
        bar = "‚ñà" * int(percentage / 10) + "‚ñë" * (10 - int(percentage / 10))
        
        text += f"<b>{name}</b>\n"
        text += f"{bar} {used_slots}/{max_slots} ({percentage:.1f}%)\n\n"
    
    text += f"üë• <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}"
    
    await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "‚ÑπÔ∏è –ú–æ—è –∑–∞–ø–∏—Å—å")
async def show_my_vote(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    if not await db.is_user_registered(user_id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!", reply_markup=get_registration_keyboard())
        return
    
    vote_info = await db.get_user_vote(user_id)
    
    if vote_info:
        activity_name, voted_at = vote_info
        await message.answer(
            f"üìã <b>–í–∞—à–∞ –∑–∞–ø–∏—Å—å:</b>\n\n"
            f"üéØ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {activity_name}\n"
            f"üìÖ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {voted_at}\n\n"
            f"–ñ–¥–µ–º –≤–∞—Å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏! üéâ",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üéØ –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å¬ª —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å."
        )

@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "üéØ <b>–í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b> - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π\n"
        "‚ÑπÔ∏è <b>–ú–æ—è –∑–∞–ø–∏—Å—å</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏\n\n"
        "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        "‚Ä¢ –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –û–î–ù–£ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º."
    )
    await message.answer(help_text, parse_mode="HTML")

@dp.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    logger.info("Database initialized")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
